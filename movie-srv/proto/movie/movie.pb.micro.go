// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: movie-srv/proto/movie/movie.proto

package go_micro_srv_movie

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MovieSrv service

type MovieSrvService interface {
	AddMovie(ctx context.Context, in *AddReq, opts ...client.CallOption) (*AddRsp, error)
	UpdateMovie(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*UpdateRsp, error)
}

type movieSrvService struct {
	c    client.Client
	name string
}

func NewMovieSrvService(name string, c client.Client) MovieSrvService {
	return &movieSrvService{
		c:    c,
		name: name,
	}
}

func (c *movieSrvService) AddMovie(ctx context.Context, in *AddReq, opts ...client.CallOption) (*AddRsp, error) {
	req := c.c.NewRequest(c.name, "MovieSrv.AddMovie", in)
	out := new(AddRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSrvService) UpdateMovie(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*UpdateRsp, error) {
	req := c.c.NewRequest(c.name, "MovieSrv.UpdateMovie", in)
	out := new(UpdateRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MovieSrv service

type MovieSrvHandler interface {
	AddMovie(context.Context, *AddReq, *AddRsp) error
	UpdateMovie(context.Context, *UpdateReq, *UpdateRsp) error
}

func RegisterMovieSrvHandler(s server.Server, hdlr MovieSrvHandler, opts ...server.HandlerOption) error {
	type movieSrv interface {
		AddMovie(ctx context.Context, in *AddReq, out *AddRsp) error
		UpdateMovie(ctx context.Context, in *UpdateReq, out *UpdateRsp) error
	}
	type MovieSrv struct {
		movieSrv
	}
	h := &movieSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&MovieSrv{h}, opts...))
}

type movieSrvHandler struct {
	MovieSrvHandler
}

func (h *movieSrvHandler) AddMovie(ctx context.Context, in *AddReq, out *AddRsp) error {
	return h.MovieSrvHandler.AddMovie(ctx, in, out)
}

func (h *movieSrvHandler) UpdateMovie(ctx context.Context, in *UpdateReq, out *UpdateRsp) error {
	return h.MovieSrvHandler.UpdateMovie(ctx, in, out)
}
